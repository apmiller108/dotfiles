"===============================================================================
"                  	  	          ~ My Vimrc ~
"===============================================================================
"Author: 		Alex Miller <alex-miller.co>
"Source: 		https/github.com/apmiller108/dotfiles
"===============================================================================
"
"                                   ~ Set ~
"
set nocompatible      " this is Vim, not Vi.
set nobackup
set nowritebackup
set noswapfile
set number				    " Show line numbers
set expandtab			    " Convert tab to spaces
set tabstop=2			    " Two spaces per tab
set shiftwidth=2
set shiftround
set history=50
set ruler             " Show cursor position all the time
set textwidth=80
set colorcolumn=+1
set clipboard=unnamed " Use the system clipboard
syntax enable
" set laststatus=2
set term=screen-256color
set background=dark
colo solarized
" colo molokai
"
"                               ~ Status Line ~
"
" Get the current git branch name
function! GitBranch()
  let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //'")
  if branch != ''
    return substitute(branch, '\n', '', 'g')
  en  
  return ''
endfunction
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%f\ %{GitBranch()}\ %m%=%l\,%c\ \ \ \%P\ %L
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*
"
"                             ~ Syntax Checkers ~
"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_html_tidy_quiet_messages = { "level": "warnings", "type": "syntax" }
let g:syntastic_javascript_jshint_quiet_messages = { "regex": ['require', 'console', 'process', 'setInterval', 'strict', 'esversion: 6', 'Hammer'] }
let g:syntastic_ruby_mri_quiet_messages = { "regex": ['ambiguous\sfirst\sargument;'] }
let g:syntastic_enable_elixir_checker = 1
let g:syntastic_elixir_checkers = ['elixir']
let g:syntastic_enable_javascript_checker = 1
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_enable_typescript_checker = 1
let g:syntastic_typescript_checkers = ['tslint']
"
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
augroup rubypath
  autocmd!

  autocmd FileType ruby setlocal suffixesadd+=.rb
augroup END
autocmd StdinReadPre * let s:std_in=1
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd Filetype javascript setlocal ts=4 sts=4 sw=4
"
"                                 ~ Mapping ~
"
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_show_hidden = 1
let mapleader = "\<space>"
nmap <leader>v :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>
nmap 0 ^
nmap <leader>vr :vsp $MYVIMRC
nmap <leader>so :source $MYVIMRC
nmap <leader>t :call RunCurrentSpecFile()<CR>
nmap k gk
nmap j gj
nmap <F2> :.w !pbcopy<CR><CR> " Copy line to clipboard
vmap <F2> :w !pbcopy<CR><CR>  " Copy visual select to clipboard
imap <F3> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
nmap <F3> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
map <C-n> :NERDTreeToggle<CR>
" surround.vim custom mapping
let g:surround_61 = "<%= \r\ %>"
let g:surround_45 = "<% \r\ %>"
"
"                         ~ plugins ~
"
call plug#begin('~/.vim/plugged')
Plug 'altercation/vim-colors-solarized'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'kana/vim-textobj-user'
Plug 'leafgarland/typescript-vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'mattn/emmet-vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'thoughtbot/vim-rspec'
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/closetag.vim'
call plug#end()
"
"
"
runtime macros/matchit.vim
execute pathogen#infect()
